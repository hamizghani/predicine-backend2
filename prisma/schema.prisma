// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  username           String               @unique
  password           String
  region             String
  price              Int[]
  TransactionHistory TransactionHistory[]
  UserStock          UserStock[]
  ForecastedMedicine ForecastedMedicine[]
}

model TransactionHistory {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime
  updatedAt  DateTime @updatedAt
  medicineId Int
  amount     Int
  userId     Int
  price      Int
  user       User     @relation(fields: [userId], references: [id])
  medicine   Medicine @relation(fields: [medicineId], references: [id])

  @@index([medicineId])
  @@index([userId])
}

model Medicine {
  id                         Int                          @id @default(autoincrement())
  name                       String
  description                String
  brief                      String
  photoLink                  String
  TransactionHistory         TransactionHistory[]
  UserStock                  UserStock[]
  DiseaseMedicineCorrelation DiseaseMedicineCorrelation[]
  ForecastedMedicine         ForecastedMedicine[]
}

model UserStock {
  id         Int      @id @default(autoincrement())
  medicineId Int
  medicine   Medicine @relation(fields: [medicineId], references: [id])
  expirationDate DateTime
  userId     Int
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model ForecastedMedicine {
  id            Int      @id @default(autoincrement())
  medicineId    Int
  medicine      Medicine @relation(fields: [medicineId], references: [id])
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  requiredStock Int
  percentage    Int
  stockoutDate  DateTime

  @@index([userId])
}

model Disease {
  id                         Int                          @id @default(autoincrement())
  name                       String
  DiseaseMedicineCorrelation DiseaseMedicineCorrelation[]
  DiseaseRecords             DiseaseRecords[]
}

model DiseaseRecords {
  id        Int     @id @default(autoincrement())
  diseaseId Int
  disease   Disease @relation(fields: [diseaseId], references: [id])

  @@index([diseaseId])
}

model DiseaseMedicineCorrelation {
  id                    Int      @id @default(autoincrement())
  diseaseId             Int
  medicineId            Int
  disease               Disease  @relation(fields: [diseaseId], references: [id])
  medicine              Medicine @relation(fields: [medicineId], references: [id])
  correlationPercentage Float

  @@unique([medicineId, diseaseId])
}
